{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/highlight.service\";\nimport * as i2 from \"@angular/router\";\nconst _c0 = function () {\n  return [\"/documentations/sparql-for-beginners\"];\n};\nexport let QueryAmharicDbpediaDocumentationComponent = /*#__PURE__*/(() => {\n  class QueryAmharicDbpediaDocumentationComponent {\n    constructor(highLightService, renderer) {\n      this.highLightService = highLightService;\n      this.renderer = renderer;\n      this._styleElement = this.renderer.createElement('link');\n      this._scriptElement = this.renderer.createElement('script');\n      this._highlighted = false;\n    }\n    ngOnInit() {\n      this._loadScript('../../../assets/scripts/prism.js');\n      this._styleElement.rel = 'stylesheet';\n      this._styleElement.href = \"../../../assets/css/prism.css\";\n      this.renderer.appendChild(document.head, this._styleElement);\n    }\n    ngAfterViewInit() {\n      if (!this._highlighted) {\n        this.highLightService.highlightAll();\n        this._highlighted = true;\n      }\n    }\n    ngOnDestroy() {\n      if (this._styleElement) {\n        this.renderer.removeChild(document.head, this._styleElement);\n      }\n    }\n    _loadScript(src) {\n      this._scriptElement = this.renderer.createElement('script');\n      this._scriptElement.src = src;\n      this._scriptElement.type = 'text/javascript';\n      this._scriptElement.async = true;\n      this.renderer.appendChild(document.body, this._scriptElement);\n    }\n    static {\n      this.ɵfac = function QueryAmharicDbpediaDocumentationComponent_Factory(t) {\n        return new (t || QueryAmharicDbpediaDocumentationComponent)(i0.ɵɵdirectiveInject(i1.HighlightService), i0.ɵɵdirectiveInject(i0.Renderer2));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: QueryAmharicDbpediaDocumentationComponent,\n        selectors: [[\"app-amahric-for-beginners-documentation\"]],\n        decls: 131,\n        vars: 2,\n        consts: [[1, \"documentation-content-container\"], [1, \"title\"], [1, \"subtitle\"], [1, \"documentation-content\"], [1, \"paragraph\"], [1, \"sub-section-title\"], [3, \"routerLink\"], [1, \"code-snippet-container\"], [1, \"code-snippet-header\"], [1, \"language-sparql\"], [\"href\", \"\"], [1, \"footer\"], [1, \"author\"], [1, \"date\"]],\n        template: function QueryAmharicDbpediaDocumentationComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0)(1, \"h1\", 1);\n            i0.ɵɵtext(2, \"Querying Amharic DBpedia\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(3, \"h2\", 2);\n            i0.ɵɵelementStart(4, \"div\", 3)(5, \"div\")(6, \"div\", 4);\n            i0.ɵɵelement(7, \"h3\", 5)(8, \"p\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(9, \"div\", 4)(10, \"h3\", 5);\n            i0.ɵɵtext(11, \"Intro\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(12, \"p\");\n            i0.ɵɵtext(13, \" SPARQL is a language designed for querying knowledge bases. If you are already familiar with the SQL query language, SPARQL is quite similar but adapted to semantic web standards. If you're new to SPARQL, refer to this \");\n            i0.ɵɵelementStart(14, \"a\", 6);\n            i0.ɵɵtext(15, \"documentation\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵtext(16, \". \");\n            i0.ɵɵelement(17, \"br\")(18, \"br\");\n            i0.ɵɵtext(19, \" In this guide, we outline how to query the Amharic DBpedia. For the purpose of this guideline, we will use an example focused on retrieving information about royalties. \");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(20, \"div\", 4)(21, \"h3\", 5);\n            i0.ɵɵtext(22, \"Named graphs\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(23, \"p\");\n            i0.ɵɵtext(24, \" A named graph is a powerful feature in RDF that allows you to group triples under a unique identifier, often referred to as a URI. This enables more organized and manageable data, particularly when working with large datasets. In this guide, we will be using the named graph \");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(25, \"div\", 7);\n            i0.ɵɵelement(26, \"div\", 8);\n            i0.ɵɵelementStart(27, \"pre\")(28, \"code\", 9);\n            i0.ɵɵtext(29, \"<http://am.dbpedia.org>\");\n            i0.ɵɵelementEnd()()();\n            i0.ɵɵtext(30, \" ,. This graph will serve as the basis for our SPARQL queries. \");\n            i0.ɵɵelement(31, \"br\");\n            i0.ɵɵelementStart(32, \"h3\", 5);\n            i0.ɵɵtext(33, \"Structure\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(34, \"p\");\n            i0.ɵɵtext(35, \" Say you want to retrieve information about a specific royalty. You might be interested in details such as their title, reign period, and notable achievements. Additionally, it could be useful to see their successors or predecessors. Typically, this kind of information can be found in the infobox on the right side of the Wikipedia page. \");\n            i0.ɵɵelement(36, \"br\")(37, \"br\");\n            i0.ɵɵtext(38, \" In semantic web, this information is represented as triples: subject, predicate, and object. The subject is the royalty you're interested in, the predicate describes various properties of that royalty, and the object is the specific value or detail you're seeking. \");\n            i0.ɵɵelement(39, \"br\")(40, \"br\");\n            i0.ɵɵtext(41, \" To better understand this concept, visit the DBpedia mappings page. You can choose the mapping for your preferred language from the navigation menu on the left. Based on what we found on the DBpedia mapping page, we\\u2019ve sketched out the following conceptual schema. \");\n            i0.ɵɵelement(42, \"img\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(43, \"div\", 4)(44, \"h3\", 5);\n            i0.ɵɵtext(45, \"First Simple Query\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(46, \"p\");\n            i0.ɵɵtext(47, \" Let\\u2019s begin by navigating to the \");\n            i0.ɵɵelementStart(48, \"a\", 10);\n            i0.ɵɵtext(49, \"Amharic DBpedia endpoint\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵtext(50, \" and running our first query. To get started, we\\u2019ll query DBpedia to retrieve all objects belonging to the class \\\"Royalty.\\\" \");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(51, \"div\", 7);\n            i0.ɵɵelement(52, \"div\", 8);\n            i0.ɵɵelementStart(53, \"pre\")(54, \"code\", 9);\n            i0.ɵɵtext(55, \"\\n          PREFIX dbo: <//dbpedia.org/ontology/>\\n          PREFIX rdf: <//www.w3.org/1999/02/22-rdf-syntax-ns#>\\n          \\n          SELECT ?s ?p ?o\\n          WHERE {\\n            ?s rdf:type dbo:Royalty .\\n            ?s ?p ?o\\n          }\\n          LIMIT 10  \\n        \");\n            i0.ɵɵelementEnd()()();\n            i0.ɵɵelementStart(56, \"p\");\n            i0.ɵɵtext(57, \" This query retrieves all triples where the subject is of type `dbo:Royalty` and returns the first ten results, as specified by the `LIMIT` clause. The `LIMIT` clause is optional and is used here to restrict the number of results for easier examination. \");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(58, \"div\", 4)(59, \"h3\", 5);\n            i0.ɵɵtext(60, \"Query with a Specific Condition\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(61, \"p\");\n            i0.ɵɵtext(62, \" We will use DBpedia to retrieve a list of royalties from Ethiopia who held a specific title during their reign. In this example, we are interested in royalties with the title \\\"\\u1295\\u1309\\u1220 \\u1290\\u1308\\u1225\\u1275 \\u12D8\\u12A2\\u1275\\u12EE\\u1335\\u12EB\\\" (King of Ethiopia). \");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(63, \"div\", 7);\n            i0.ɵɵelement(64, \"div\", 8);\n            i0.ɵɵelementStart(65, \"pre\")(66, \"code\", 9);\n            i0.ɵɵtext(67, \"\\n          PREFIX dbo: <//dbpedia.org/ontology/>\\n          PREFIX rdf: <//www.w3.org/1999/02/22-rdf-syntax-ns#>\\n          PREFIX rdfs: <//www.w3.org/2000/01/rdf-schema#>\\n          \\n          SELECT ?s ?p ?o\\n          WHERE {\\n            ?s dbo:title \\\"\\u1295\\u1309\\u1220 \\u1290\\u1308\\u1225\\u1275 \\u12D8\\u12A2\\u1275\\u12EE\\u1335\\u12EB\\\"@am .\\n            ?s ?p ?o\\n          }\\n          LIMIT 10\\n        \");\n            i0.ɵɵelementEnd()()();\n            i0.ɵɵelementStart(68, \"p\");\n            i0.ɵɵtext(69, \" Alternatively, we can query the number of royalties who held this title and have a reference in the Amharic Wikipedia. \");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(70, \"div\", 7);\n            i0.ɵɵelement(71, \"div\", 8);\n            i0.ɵɵelementStart(72, \"pre\")(73, \"code\", 9);\n            i0.ɵɵtext(74, \"\\n          PREFIX dbo: <//dbpedia.org/ontology/>\\n          PREFIX rdf: <//www.w3.org/1999/02/22-rdf-syntax-ns#>\\n\\n          SELECT (COUNT(DISTINCT ?s) AS ?royaltyCount)\\n          WHERE {\\n            ?s rdf:type dbo:Royalty .\\n            ?s dbo:title \\\"\\u1295\\u1309\\u1220 \\u1290\\u1308\\u1225\\u1275 \\u12D8\\u12A2\\u1275\\u12EE\\u1335\\u12EB\\\"@am .\\n          }\\n          LIMIT 1\\n        \");\n            i0.ɵɵelementEnd()()();\n            i0.ɵɵelementStart(75, \"p\");\n            i0.ɵɵtext(76, \" In this query, the `COUNT(DISTINCT ?s)` function is particularly useful because it counts the number of distinct royalties, rather than the total number of triples with that subject. This approach ensures an accurate count of unique royalties, avoiding inflated numbers that might arise from multiple triples associated with the same subject. \");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(77, \"div\", 7);\n            i0.ɵɵelement(78, \"div\", 8);\n            i0.ɵɵelementStart(79, \"pre\")(80, \"code\", 9);\n            i0.ɵɵtext(81, \"\\n          PREFIX dbo: <//dbpedia.org/ontology/>\\n          PREFIX rdf: <//www.w3.org/1999/02/22-rdf-syntax-ns#>\\n          PREFIX rdfs: <//www.w3.org/2000/01/rdf-schema#>\\n          \\n          SELECT ?s ?p ?o\\n          WHERE {\\n            ?s dbo:title \\\"\\u1295\\u1309\\u1220 \\u1290\\u1308\\u1225\\u1275 \\u12D8\\u12A2\\u1275\\u12EE\\u1335\\u12EB\\\"@am .\\n            ?s ?p ?o\\n          }\\n          LIMIT 10\\n        \");\n            i0.ɵɵelementEnd()()()();\n            i0.ɵɵelementStart(82, \"div\", 4)(83, \"h3\", 5);\n            i0.ɵɵtext(84, \"Checking the Existence of a Fact\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(85, \"p\");\n            i0.ɵɵtext(86, \" Another interesting aspect of SPARQL is that it can be used to answer yes-or-no questions about whether something holds true or not. For instance, we can ask DBpedia whether John Doe is or has been the King of Ethiopia. \");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(87, \"div\", 7);\n            i0.ɵɵelement(88, \"div\", 8);\n            i0.ɵɵelementStart(89, \"pre\")(90, \"code\", 9);\n            i0.ɵɵtext(91, \"\\n          PREFIX dbo: <//dbpedia.org/ontology/>\\n          PREFIX rdf: <//www.w3.org/1999/02/22-rdf-syntax-ns#>\\n          PREFIX rdfs: <//www.w3.org/2000/01/rdf-schema#>\\n        ASK {\\n        ?johnDoe rdfs\\n        \\\"John Doe\\\"@en.\\n        ?johnDoe rdf\\n        dbo\\n        .\\n        ?johnDoe dbo\\n        \\\"\\u1295\\u1309\\u1220 \\u1290\\u1308\\u1225\\u1275 \\u12D8\\u12A2\\u1275\\u12EE\\u1335\\u12EB\\\"@am .\\n        }\\n        LIMIT 1\\n        \");\n            i0.ɵɵelementEnd()()()();\n            i0.ɵɵelementStart(92, \"div\", 4)(93, \"h3\", 5);\n            i0.ɵɵtext(94, \" Handling UNION Operations in SPARQL Queries \");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(95, \"p\");\n            i0.ɵɵtext(96, \" moving on to more complex queires, lets see how we can define a or operation on sparql queries. in this example we will retrive royalities who either father or mother is also a royalty. \");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(97, \"div\", 7);\n            i0.ɵɵelement(98, \"div\", 8);\n            i0.ɵɵelementStart(99, \"pre\")(100, \"code\", 9);\n            i0.ɵɵtext(101, \"\\n          \\n        \");\n            i0.ɵɵelementEnd()()();\n            i0.ɵɵelementStart(102, \"p\");\n            i0.ɵɵtext(103, \" The query retrieves distinct subjects, predicates, objects, and titles (if available) related to royalties. It filters entities to include only those of type dbo:Royalty. The OPTIONAL clause is used to include the title of the royalty if it exists. Additionally, the query checks if the father of the royalty is also of type dbo:Royalty. It also checks if the mother of the royalty is of type dbo:Royalty. The UNION operator is employed to ensure that at least one of these conditions (either the father or the mother being a royalty) is satisfied. \");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(104, \"div\", 7);\n            i0.ɵɵelement(105, \"div\", 8);\n            i0.ɵɵelementStart(106, \"pre\")(107, \"code\", 9);\n            i0.ɵɵtext(108, \"\\n          PREFIX dbo: <//dbpedia.org/ontology/>\\n          PREFIX rdf: <//www.w3.org/1999/02/22-rdf-syntax-ns#>\\n          PREFIX rdfs: <//www.w3.org/2000/01/rdf-schema#>\\n\\n          SELECT DISTINCT ?royalty ?p ?o ?title\\n\\n          WHERE {\\n            # Check if the person is a royalty\\n            ?royalty rdf:type dbo:Royalty .\\n            OPTIONAL { ?royalty dbo:title ?title . }\\n\\n            # Here we check if the father is a royalty\\n            {\\n              ?royalty dbo:father ?parent .\\n              ?parent rdf:type dbo:Royalty .\\n            }\\n            UNION\\n            # Here we check if the mother is a royalty\\n            {\\n              ?royalty dbo:mother ?parent .\\n              ?parent rdf:type dbo:Royalty .\\n            }\\n\\n            ?royalty ?p ?o\\n            }\\n          LIMIT 10\\n\\n        \");\n            i0.ɵɵelementEnd()()();\n            i0.ɵɵelementStart(109, \"p\");\n            i0.ɵɵtext(110, \" We can also do a fact checking to see if a royalty has a royalty for a mom or a dad \");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(111, \"div\", 7);\n            i0.ɵɵelement(112, \"div\", 8);\n            i0.ɵɵelementStart(113, \"pre\")(114, \"code\", 9);\n            i0.ɵɵtext(115, \"\\n          PREFIX dbo: <//dbpedia.org/ontology/>\\nPREFIX rdf: <//www.w3.org/1999/02/22-rdf-syntax-ns#>\\nPREFIX rdfs: <//www.w3.org/2000/01/rdf-schema#>\\n\\nASK {\\n  ?person rdfs:label \\\"\\u12ED\\u130D\\u1263 \\u133D\\u12EE\\u1295\\\"@am .\\n  \\n  # Check if his father is a royalty\\n  {\\n    ?person dbo:father ?parent .\\n    ?parent rdf:type dbo:Royalty .\\n  }\\n  UNION\\n  # Check if his mother is a royalty\\n  {\\n    ?person dbo:mother ?parent .\\n    ?parent rdf:type dbo:Royalty .\\n  }\\n  }\\n\\n        \");\n            i0.ɵɵelementEnd()()();\n            i0.ɵɵelementStart(116, \"p\");\n            i0.ɵɵtext(117, \" We can also perform a fact-check to determine if a royalty has a parent who is also a royalty. This involves checking whether either the mother or father of the royalty is of type `dbo:Royalty`. \");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(118, \"div\", 7);\n            i0.ɵɵelement(119, \"div\", 8);\n            i0.ɵɵelementStart(120, \"pre\")(121, \"code\", 9);\n            i0.ɵɵtext(122, \"\\n  PREFIX dbo: <//dbpedia.org/ontology/>\\n  PREFIX rdf: <//www.w3.org/1999/02/22-rdf-syntax-ns#>\\n  PREFIX rdfs: <//www.w3.org/2000/01/rdf-schema#>\\n\\n  ASK {\\n    ?person rdfs:label \\\"\\u12ED\\u130D\\u1263 \\u133D\\u12EE\\u1295\\\"@am .\\n  \\n    # Check if his father is a royalty\\n    {\\n      ?person dbo:father ?parent .\\n      ?parent rdf:type dbo:Royalty .\\n    }\\n    UNION\\n    # Check if his mother is a royalty\\n    {\\n      ?person dbo:mother ?parent .\\n      ?parent rdf:type dbo:Royalty .\\n    }\\n    }\\n\");\n            i0.ɵɵelementEnd()()();\n            i0.ɵɵelementStart(123, \"p\");\n            i0.ɵɵtext(124, \" This query checks whether the individual \\\"\\u12ED\\u130D\\u1263 \\u133D\\u12EE\\u1295\\\" has either a father or a mother who is a royalty. The `ASK` query will return true if at least one of the conditions is met\\u2014i.e., if either the mother or father of the individual is of type `dbo:Royalty`. \");\n            i0.ɵɵelementEnd()()()();\n            i0.ɵɵelementStart(125, \"div\", 11);\n            i0.ɵɵelement(126, \"hr\");\n            i0.ɵɵelementStart(127, \"p\", 12);\n            i0.ɵɵtext(128, \"Author: Meti Bayissa\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(129, \"p\", 13);\n            i0.ɵɵtext(130, \"August, 2024\");\n            i0.ɵɵelementEnd()()();\n          }\n          if (rf & 2) {\n            i0.ɵɵadvance(14);\n            i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(1, _c0));\n          }\n        },\n        dependencies: [i2.RouterLink],\n        styles: [\".documentation-content-container[_ngcontent-%COMP%]{margin:7% 10%}.documentation-content-container[_ngcontent-%COMP%]   .title[_ngcontent-%COMP%]{text-align:center;font-size:2.5rem;font-weight:700;color:#073144;text-transform:capitalize}.documentation-content-container[_ngcontent-%COMP%]   .sub-section-title[_ngcontent-%COMP%]{font-size:1.4rem;text-transform:capitalize;margin-bottom:1rem}.documentation-content-container[_ngcontent-%COMP%]   .documentation-content[_ngcontent-%COMP%]   .paragraph[_ngcontent-%COMP%]{text-align:justify;line-height:25px;font-size:1.1rem}.documentation-content-container[_ngcontent-%COMP%]   .documentation-content[_ngcontent-%COMP%]   .paragraph[_ngcontent-%COMP%]   .highlight-language-keyword[_ngcontent-%COMP%]{color:#e80b76;font-weight:500}.documentation-content-container[_ngcontent-%COMP%]   .documentation-content[_ngcontent-%COMP%]   .code-snippet-container[_ngcontent-%COMP%]{padding:0 1.5rem;margin:2% 5%}.documentation-content-container[_ngcontent-%COMP%]   .documentation-content[_ngcontent-%COMP%]   .code-snippet-header[_ngcontent-%COMP%]{background-color:#eecd62aa;display:flex;height:1.2rem;justify-content:flex-end;gap:15px;color:#0c0900;padding:.5rem}.documentation-content-container[_ngcontent-%COMP%]   .documentation-content[_ngcontent-%COMP%]   .language-sparql[_ngcontent-%COMP%]{margin:0!important;padding:0!important}.documentation-content-container[_ngcontent-%COMP%]   .documentation-content[_ngcontent-%COMP%]   .closing-remarks[_ngcontent-%COMP%]{margin-top:7%}.documentation-content-container[_ngcontent-%COMP%]   .footer[_ngcontent-%COMP%]{font-style:italic;color:gray;margin-top:9%;text-align:center}.documentation-content-container[_ngcontent-%COMP%]   mat-list-item[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{word-wrap:break-word;white-space:pre-wrap}@media (max-width: 768px){.documentation-content-container[_ngcontent-%COMP%]{margin:5% 8%}.documentation-content-container[_ngcontent-%COMP%]   .title[_ngcontent-%COMP%]{font-size:2rem}.documentation-content-container[_ngcontent-%COMP%]   .sub-section-title[_ngcontent-%COMP%]{font-size:1.3rem}.documentation-content-container[_ngcontent-%COMP%]   .documentation-content[_ngcontent-%COMP%]   .paragraph[_ngcontent-%COMP%]{font-size:1rem;line-height:22px}.documentation-content-container[_ngcontent-%COMP%]   .documentation-content[_ngcontent-%COMP%]   .code-snippet-container[_ngcontent-%COMP%]{margin:2%}.documentation-content-container[_ngcontent-%COMP%]   .documentation-content[_ngcontent-%COMP%]   .code-snippet-header[_ngcontent-%COMP%]{height:auto;padding:.3rem}.documentation-content-container[_ngcontent-%COMP%]   .footer[_ngcontent-%COMP%]{margin-top:7%}}@media (max-width: 480px){.documentation-content-container[_ngcontent-%COMP%]{margin:5%}.documentation-content-container[_ngcontent-%COMP%]   .title[_ngcontent-%COMP%]{font-size:1.8rem}.documentation-content-container[_ngcontent-%COMP%]   .sub-section-title[_ngcontent-%COMP%]{font-size:1.2rem}.documentation-content-container[_ngcontent-%COMP%]   .documentation-content[_ngcontent-%COMP%]   .paragraph[_ngcontent-%COMP%]{font-size:.95rem;line-height:20px}.documentation-content-container[_ngcontent-%COMP%]   .documentation-content[_ngcontent-%COMP%]   .code-snippet-container[_ngcontent-%COMP%]{margin:2% 1%;padding:0 1rem}.documentation-content-container[_ngcontent-%COMP%]   .documentation-content[_ngcontent-%COMP%]   .code-snippet-header[_ngcontent-%COMP%]{font-size:.9rem;padding:.2rem}.documentation-content-container[_ngcontent-%COMP%]   .footer[_ngcontent-%COMP%]{font-size:.9rem;margin-top:6%}}\"]\n      });\n    }\n  }\n  return QueryAmharicDbpediaDocumentationComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}